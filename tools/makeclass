#!/bin/bash
#
#
echo "welcome to fiap laps"

if [[ $EUID -ne 0 ]]; then
	echo "You need to be root to run this"
	exit 1
fi

if [[ ! $1 ]]; then
	echo "Please usage: makeclass <docker|gitlab|jenkins|puppet|ansible>"
	exit 2
fi

function LINE() {
	echo "+==========================================================+"
}

case $1 in
	docker)
		echo "Start docker settings"

		echo "Update the system repository"
		if ! apt-get update; then
			echo "Could not update the repository, please check "
			echo "the system internet connectivity"
			exit 3
		fi

		echo "Installing docker requirements package"
		if ! apt-get install -y apt-transport-https curl ca-certificates gnupg2 software-properties-common; then
			echo "Could not install the docker requirements"
			echo "please check the internet connectivity"
			exit 4
		fi

		echo "Importing the docker GPG key"
		# if ! curl -fsSL https://yum.dockerproject.org/gpg | apt-key add -; then
		if ! curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add -; then
			echo "Could not import the docker GPG key"
		fi

		echo "Configuring the docker repository"
		if ! add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable"; then
			echo "Error on trying to configure the docker repository"
			exit 5
		fi

		echo "Installing docker engine"
		apt-get update \
			apt-get install -y docker-ce

		systemctl status docker

		LINE
		echo "Creating docker netowrk"
		if ! docker network create --subnet 172.18.0.0/16 companylan; then
			echo "Could not create the docker network settings"
			exit 7
		fi

		# end docker settings
		;;

	ansible)
		echo "Starting ansible class settings"

		echo "Creating ansible configuration settings"
		if ! mkdir -p /etc/keys/; then
			echo "Could not create the /etc/keys/directory"
			echo "make sure you are running this as root"
			exit 3
		fi

		echo "Creating the machine ssh keys"
		if ! ssh-keygen -t rsa -f /etc/keys/sshkey -N ''; then
			echo "Could not generate the ssh rsa key for ansible connection"
			exit 4
		fi

		echo "Enable root login on the sshd_config"
		if ! sed -i 's/PermitRootLogin/PermitRootLogin yes \#/g' /etc/ssh/sshd_config; then
			echo "Could not enable root login password"
			exit 5
		fi

		echo "Installing ssh pass file"
		if ! apt-get install -y sshpass; then
			echo "Could not install the ssh-pass"
			exit 6
		fi	

		echo "Configure the generated ssh keys"
		echo "fiap" > /tmp/.vhMM

		HOST='fiap@192.168.200.50 fiap@192.168.200.100 root@192.168.200.50 root@192.168.200.100'
		for host in $HOST; do
			if ! sshpass -f /tmp/.vhMMi ssh-copy-id -i /etc/keys/sshkey.pub $host; then
				echo "Could not copy the sshkey: $host"
			fi
		done


		echo "Installing ansible package"
		if ! apt-get install -y ansible; then
			echo "Could not install ansible"
			exit 7
		fi

		echo "Configure the ansible structure"
		if ! mkdir -p /etc/ansible/playbooks/{common,homolog,production} \
					  /etc/ansible/roles; then
			echo "Could not create the ansible structure"
			exit 8
		fi

		echo "Configuring ansible configuration files"
		if [[ -f '/etc/ansible/hosts' ]]; then
			cp /etc/ansible/hosts /etc/ansible/hosts.origin
		fi
		
		echo "
[puppetmaster]
devops.dexter.com.br

[docker]
docker.dexter.com.br
" > /etc/ansible/hosts
		if [[ ! -f '/etc/ansible/hosts' ]]; then
			echo "Not able to found the ansible host file"
			exit 9
		fi

		echo "Change ansible settings"
		sed -i 's/\#roles_path/roles_path/g' /etc/ansible/ansible.cfg
		sed -i 's/\#timeout/timeout/g' /etc/ansible/ansible.cfg
		sed -i 's/\#log_path/log_path/g' /etc/ansible/ansible.cfg
		sed -i 's/\#private_key_file/private_key_file/g' /etc/ansible/ansible.cfg
		sed -i 's/\private_key_file = /private_key_file = /etc/keys/sshkey \#/g' /etc/ansible/ansible.cfg


		echo "Creating the Ansible configuration"
		if mkdir -p /etc/ansible/roles/puppet/{tasks,handlers,files}; then
			echo "
# File generated by the provisioner
---
- name: Autalizar o modulo do Puppet Master
  git:
    repo: "{{ repo }}"
    dest: /etc/puppet/environments/{{ env }}/modules/{{ modulename }}
    key_file: /etc/keys/sshkey

- name: clean-up certificates
  command: puppet cert clean {{ certificatename }}.dexter.com.br
  when: certificated is defined
  ignore_errors: yes
" > /etc/ansible/roles/puppet/tasks/main.yaml

		else
			echo "Could not create the roles"
			exit 10
		fi

		# end of ansible settings
		;;

	puppet)
		echo "Download puppet repository configurator"
		wget https://apt.puppetlabs.com/puppetlabs-release-precise.deb

		echo "Installing puppet repo files"
		dpkg -i puppetlabs-release-precise.deb

		echo "Installing puppet agent"
		apt-get update
		apt-get install -y puppet vim-puppet puppet-lint

		echo "Disabling templatedir from puppet"
		sed -i 's/templatedir/\# templatedir/g' /etc/puppet/puppet.conf

		echo "Installing puppet master"
		apt-get install -y puppetmaster-passenger

		echo '
dns_alt_names=puppet,puppetmaster,puppet.dexter.com.br,puppetmaster.devops.com.br
environmentpath=$confdir/environments
autosign=$confdir/autosign.conf
' >> /etc/puppet/puppet.conf

		echo "Creating the basic directory and structure"
		mkdir -p /etc/puppet/environments/{production,homolog}
		mkdir -p /etc/puppet/environments/production/{manifests,modules}
		mkdir -p /etc/puppet/environments/homolog/{manifests,modules}
		echo "*.dexter.com.br" > /etc/puppet/autosign.conf

		echo "Create the docker templates"
		if [[ -f '/vagrant/docker/Dockerfile.homolog' ]]; then
			docker build /vagrant/docker/Dockerfile.homolog homolog-template
		fi

		if [[ -f '/vagrant/docker/Dockerfile.production' ]]; then
			docker build /vagrant/docker/Dockerfile.production production-template
		fi

		echo "Importing the dns module"
		if [[ -d '/vagrant/devops/puppet-dns' ]]; then
			cp -r /vagrant/devops/puppet-dns /etc/puppet/environments/homolog/puppet-dns
		fi
		# end of puppet
		;;

	gitlab)
		echo "installing git tools"
		apt-get install -y git
		
		echo "Configuring git user & email"
		git config --global user.name "Fiap Devops"
		git config --global user.email "devops@fiap.com.br"

		echo "Starting gitlab provisioner"
		apt-get update && \
			apt-get install -y curl \
				openssh-server \
				ca-certificates \
				postfix \
				apt-transport-https 
	
		echo "
deb https://packages.gitlab.com/gitlab/gitlab-ce/debian/ jessie main
deb-src https://packages.gitlab.com/gitlab/gitlab-ce/debian/ jessie main 
" > /etc/apt/sources.list.d/gitlab.list

		echo "Import gitlab key"
		curl https://packages.gitlab.com/gpg.key | apt-key add -

		echo "installing gitlab"
		apt-get update; \
			apt-get install gitlab-ce

		echo "Update jenkins configuration"
		sed -i 's/external_url/external_url `= \"http:\/\/devops.dexter.com.br:8090\"\#"/g' /etc/gitlab/gitlab.rb
		sed -i "s/#unicorn\['port'\] = 8080/unicor\['port'\] = 8079/g" /etc/gitlab/gitlab.rb

		echo "Starting gitlab configuration"
		gitlab-ctl reconfigure
		gitlab-ctl restart

		# end gitlab
		;;

	jenkins)

		echo 'deb http://ppa.launchpad.net/webupd8team/java/ubuntu xenial main' > /etc/apt/sources.list.d/java.list
		apt-get update; \
			apt-get install oracle-java8-installer

		wget -q -O - http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key | apt-key add -
		
		echo 'deb http://pkg.jenkins-ci.org/debian binary/' > /etc/apt/sources.list.d/jenkins.list
		apt-get update && \
			apt-get install jenkins

		systemctl status jenkins
		# end jenkins
		;;

	*)
		echo "Please usage: makeclass <docker|gitlab|jenkins|puppet|ansible>"
		;;
esac
